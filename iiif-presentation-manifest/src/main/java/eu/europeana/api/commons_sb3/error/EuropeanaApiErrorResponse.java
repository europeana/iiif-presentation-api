package eu.europeana.api.commons_sb3.error;


import com.fasterxml.jackson.annotation.*;
import org.springframework.util.StringUtils;

import jakarta.servlet.http.HttpServletRequest;
import java.time.OffsetDateTime;
import java.util.List;

import static eu.europeana.api.commons_sb3.error.EuropeanaErrorConstants.*;


/**
 * This class contains fields to be returned by APIs when an error occurs within 
 * the application that is caught by the global exception handler. Note that errors 
 * that are uncaught will be generated by the EuropeanaApiErrorAttributes and 
 * EuropeanaErrorController classes, so the code here should have similar fields 
 * and ordering
 */
@JsonPropertyOrder({CONTEXT, TYPE, SUCCESS, STATUS, CODE, ERROR, MESSAGE
                  , SEE_ALSO, TIMESTAMP, PATH, TRACE})
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)
public class EuropeanaApiErrorResponse {

    @JsonProperty(CONTEXT)
    private String context = ERROR_CONTEXT;

    @JsonProperty(TYPE)
    private String type= ERROR_TYPE;

    @JsonProperty(SUCCESS)
    private boolean success = false;

    @JsonProperty(STATUS)
    private int status;

    @JsonProperty(ERROR)
    private String error;

    @JsonProperty(MESSAGE)
    private String message;

    @JsonProperty(SEE_ALSO)
    private String seeAlso = SEE_ALSO_VALUE;

    @JsonFormat(pattern="yyyy-MM-dd'T'HH:mm:ss'Z'")
    private OffsetDateTime timestamp = OffsetDateTime.now();

    @JsonProperty(TRACE)
    private String trace;

    @JsonProperty(PATH)
    private String path;

    @JsonProperty(CODE)
    private String code;

    @JsonCreator
    protected EuropeanaApiErrorResponse() {}

    private EuropeanaApiErrorResponse(int status, String error, String message
                                    , String trace, String path, String code) {
        this.status = status;
        this.error = error;
        this.message = message;
        this.trace = trace;
        this.path = path;
        this.code = code;
    }

    public String getError() {
        return error;
    }

    public boolean isSuccess() {
        return success;
    }

    public int getStatus() {
        return status;
    }

    public String getMessage() {
        return message;
    }

    public OffsetDateTime getTimestamp() {
        return timestamp;
    }

    public String getTrace() {
        return trace;
    }

    public String getPath() {
        return path;
    }

    public String getCode() {
        return code;
    }

    public String getContext() {
        return context;
    }

    public String getType() {
        return type;
    }

    public String getSeeAlso() {
        return seeAlso;
    }

    public static class Builder {
        private int status;
        private String message;
        private String error;
        private String trace;
        private final String path;
        private String code;

        public Builder(HttpServletRequest req, Exception e
                     , boolean stacktraceEnabled) {
            this.path = ResponseUtils.getRequestPath(req);
            boolean includeErrorStack = false;
            String profile = req.getParameter(QUERY_PARAM_PROFILE);
            // check if profile contains debug
            if (StringUtils.hasLength(profile)) {
                includeErrorStack = List.of(profile.split(QUERY_PARAM_PROFILE_SEPARATOR))
                                        .contains(PROFILE_DEBUG);
            }
            if (stacktraceEnabled && includeErrorStack) {
                this.trace = ResponseUtils.getExceptionStackTrace(e);
            }
        }

        public Builder setStatus(int status) {
            this.status = status;
            return this;
        }

        public Builder setMessage(String message) {
            this.message = message;
            return this;
        }

        public Builder setError(String error) {
            this.error = error;
            return this;
        }

        public Builder setCode(String code) {
            this.code = code;
            return this;
        }

        public EuropeanaApiErrorResponse build() {
            return new EuropeanaApiErrorResponse(status, error, message, trace
                                               , path, code);
        }
    }
}